main
var a, b, c, d, e;  
{
    let a <- call InputNum ( ); 
    let b<- a ;
    let c   <- b; 
    let d<-b+c; 
    let e<- a+b;  
    if a < 0 then 
        let d <- d+e;   
        if d != 0 then 
            let a <- d 
        fi; 
    else   
        let d<-a; 
        if e >= 1 then 
            let e <- a 
        else 
            let e<-1 
        fi; 
        let a <- c 
    fi; 
    call OutputNum  ( a ) 
}.


Expected GraphViz code:

digraph G{
BB0 [shape=record, label="<b>BB0| { 0: const #4 | 3: const #0 | 14: const #1 }}"];
BB1 [shape=record, label="<b>BB1| { 1: read | 2: add (1) (1) | 4: cmp (1) (3) | 5: bge (4) (15) }}"];
BB2 [shape=record, label="<b>BB2| { 6: add (2) (2) | 8: cmp (6) (3) | 9: beq (8) (10) }}"];
BB3 [shape=record, label="<b>BB3| { 12: bra (10) }}"];
BB4 [shape=record, label="<b>BB4| { 10: phi (6) (1) | 13: bra (7) }}"];
BB5 [shape=record, label="<b>BB5| { 15: cmp (2) (14) | 16: blt (15) (20) }}"];
BB6 [shape=record, label="<b>BB6| { 19: bra (17) }}"];
BB7 [shape=record, label="<b>BB7| { 20:  }}"];
BB8 [shape=record, label="<b>BB8| { 17: phi (1) (14) }}"];
BB9 [shape=record, label="<b>BB9| { 7: phi (6) (1) | 11: phi (10) (1) | 18: phi (2) (17) | 21: write (11) | 22: end }}"];
BB0:s -> BB1:n;
BB1:s -> BB2:n [label="fall-through"];
BB2:s -> BB3:n [label="fall-through"];
BB3:s -> BB4:n [label="branch"];
BB2:s -> BB4:n [label="fall-through"];
BB1:s -> BB5:n [label="branch"];
BB5:s -> BB6:n [label="fall-through"];
BB5:s -> BB7:n [label="branch"];
BB6:s -> BB8:n [label="branch"];
BB7:s -> BB8:n [label="fall-through"];
BB4:s -> BB9:n [label="branch"];
BB8:s -> BB9:n [label="fall-through"];
}
