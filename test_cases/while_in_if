main 
var x,y,i,j; 
{
    let i<-call InputNum();
    let x<-0; 
    let y<-0; 
    let j<- i; 
    if j < 0 then 
        let j <- x + 1; 
        let x <- i + 1; 
        while x<10 do 
            let x <- j + 1 ; 
            let y <- i + 1 
        od; 
    else 
        let i <-i + 1 
    fi;
    call OutputNum(x)
}.


Expected GraphViz (ignore 0: const #4 in BB0):
digraph G{
BB0 [shape=record, label="<b>BB0| { 1: const #0 | 4: const #1 | 11: const #10 }}"];
BB1 [shape=record, label="<b>BB1| { 0: read | 2: cmp (0) (1) | 3: bge (2) (18) }}"];
BB2 [shape=record, label="<b>BB2| { 5: add (1) (4) | 7: add (0) (4) }}"];
BB3 [shape=record, label="<b>BB3| { 9: phi (7) (14) | 10: phi (1) (15) | 12: cmp (9) (11) | 13: bge (12) (16) }}"];
BB4 [shape=record, label="<b>BB4| { 14: add (5) (4) | 15: add (0) (4) }}"];
BB5 [shape=record, label="<b>BB5| { 16: bra (6) }}"];
BB6 [shape=record, label="<b>BB6| { 18: add (0) (4) }}"];
BB7 [shape=record, label="<b>BB7| { 6: phi (5) (0) | 8: phi (9) (1) | 17: phi (10) (1) | 19: phi (0) (18) | 20: write (8) | 21: end }}"];
BB0:s -> BB1:n;
BB1:s -> BB2:n [label="fall-through"];
BB2:s -> BB3:n;
BB3:s -> BB4:n [label="fall-through"];
BB4:s -> BB3:n [label="fall-through"];
BB3:s -> BB5:n [label="follow"];
BB1:s -> BB6:n [label="branch"];
BB5:s -> BB7:n [label="branch"];
BB6:s -> BB7:n [label="fall-through"];
}
